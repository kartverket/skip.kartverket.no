"use strict";(self.webpackChunkskip_docs=self.webpackChunkskip_docs||[]).push([[7762],{21097:(e,t,n)=>{n.d(t,{A:()=>i});const i=n.p+"assets/images/anthos-6-bf519df28c4acffaa304344b0ad145aa.jpg"},28453:(e,t,n)=>{n.d(t,{R:()=>a,x:()=>r});var i=n(96540);const o={},s=i.createContext(o);function a(e){const t=i.useContext(s);return i.useMemo(function(){return"function"==typeof e?e(t):{...t,...e}},[t,e])}function r(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:a(e.components),i.createElement(s.Provider,{value:t},e.children)}},52104:(e,t,n)=>{n.d(t,{A:()=>i});const i=n.p+"assets/images/anthos-7-e3f4b6cffc3dd928706042e2610f75e4.png"},62371:e=>{e.exports=JSON.parse('{"permalink":"/blog/hybrid-kubernetes-in-production-part-3","source":"@site/blog/2024-01-25-anthos-3.md","title":"Hybrid Kubernetes in production pt. 3","description":"In this final installment of the Anthos series, we\'ll talk about what we learned on the way building hybrid infrastructure\\n","date":"2024-01-25T00:00:00.000Z","tags":[{"inline":true,"label":"anthos","permalink":"/blog/tags/anthos"},{"inline":true,"label":"kubernetes","permalink":"/blog/tags/kubernetes"},{"inline":true,"label":"hybrid","permalink":"/blog/tags/hybrid"}],"readingTime":10.13,"hasTruncateMarker":true,"authors":[{"name":"Eline Henriksen","title":"Tidligere Produkteier og Plattformutvikler","url":"https://eliine.dev","imageURL":"https://github.com/eliihen.png","key":"elinehenriksen","page":null}],"frontMatter":{"title":"Hybrid Kubernetes in production pt. 3","description":"In this final installment of the Anthos series, we\'ll talk about what we learned on the way building hybrid infrastructure\\n","slug":"hybrid-kubernetes-in-production-part-3","authors":["elinehenriksen"],"tags":["anthos","kubernetes","hybrid"],"image":"/img/anthos-6.jpg","hide_table_of_contents":false},"unlisted":false,"prevItem":{"title":"Crisis Management Exercises","permalink":"/blog/crisis-management-exercises"},"nextItem":{"title":"SKIP on Plattformpodden!","permalink":"/blog/skip-on-plattformpodden"}}')},73198:(e,t,n)=>{n.d(t,{A:()=>i});const i=n.p+"assets/images/mesh-1-154deaa307f1f382bd1b5c33494d1712.png"},92661:(e,t,n)=>{n.d(t,{A:()=>i});const i=n.p+"assets/images/anthos-2-1a3889bc339c3f2ac97e81d32c482cff.png"},96822:(e,t,n)=>{n.d(t,{A:()=>i});const i=n.p+"assets/images/cloud-1-92f59291846076655bb737aa95d25a59.jpg"},98642:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>h,contentTitle:()=>r,default:()=>u,frontMatter:()=>a,metadata:()=>i,toc:()=>l});var i=n(62371),o=n(74848),s=n(28453);const a={title:"Hybrid Kubernetes in production pt. 3",description:"In this final installment of the Anthos series, we'll talk about what we learned on the way building hybrid infrastructure\n",slug:"hybrid-kubernetes-in-production-part-3",authors:["elinehenriksen"],tags:["anthos","kubernetes","hybrid"],image:"/img/anthos-6.jpg",hide_table_of_contents:!1},r=void 0,h={authorsImageUrls:[void 0]},l=[{value:"Do you really need hybrid?",id:"do-you-really-need-hybrid",level:2},{value:"Hybrid gives your organization flexibility",id:"hybrid-gives-your-organization-flexibility",level:2},{value:"Service mesh is hard, but maybe a necessary evil to make hybrid less painful",id:"service-mesh-is-hard-but-maybe-a-necessary-evil-to-make-hybrid-less-painful",level:2},{value:"Anthos helps you as a platform team getting started with best practices.. Even if you plan to move to open source components later",id:"anthos-helps-you-as-a-platform-team-getting-started-with-best-practices-even-if-you-plan-to-move-to-open-source-components-later",level:2},{value:"Keep in mind autoscaling when choosing licensing models",id:"keep-in-mind-autoscaling-when-choosing-licensing-models",level:2},{value:"Summary",id:"summary",level:2}];function d(e){const t={a:"a",em:"em",h2:"h2",img:"img",li:"li",ol:"ol",p:"p",...(0,s.R)(),...e.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(t.p,{children:(0,o.jsx)(t.img,{alt:"Anthos in Google Cloud",src:n(21097).A+"",width:"770",height:"588"})}),"\n",(0,o.jsxs)(t.p,{children:["In this final installment of the Anthos series, we will talk about what we\nlearned on the way to building hybrid infrastructure at ",(0,o.jsx)(t.a,{href:"https://kartverket.no/en",children:"Kartverket"}),"."]}),"\n",(0,o.jsx)(t.p,{children:"It's been a long journey, and there's plenty of things we've learned along the\nway in building a hybrid Kubernetes platform. We'll try to share some of those\nhard earned lessons in this post."}),"\n",(0,o.jsx)(t.p,{children:"This newsletter is the final entry of a three part series about Anthos in\nKartverket."}),"\n",(0,o.jsxs)(t.ol,{children:["\n",(0,o.jsx)(t.li,{children:(0,o.jsx)(t.a,{href:"/blog/hybrid-kubernetes-in-production-part-1",children:"Why we chose Anthos"})}),"\n",(0,o.jsx)(t.li,{children:(0,o.jsx)(t.a,{href:"/blog/hybrid-kubernetes-in-production-part-2",children:"How we run Anthos"})}),"\n",(0,o.jsx)(t.li,{children:"Benefits and what we would have done differently (You are here!)"}),"\n"]}),"\n",(0,o.jsx)(t.h2,{id:"do-you-really-need-hybrid",children:"Do you really need hybrid?"}),"\n",(0,o.jsx)(t.p,{children:"When we started out, there was an assumption that it was simply impossible to\nuse the cloud. This came from all sides of the organization, so this was\ntaken as a given. SKIP was therefore started as a project to build an on-premise\nKubernetes platform to service our needs as a transition to cloud native\ndevelopment principles."}),"\n",(0,o.jsx)(t.p,{children:"As we moved along, a lot of these assumptions got challenged. We found that\nmost of these assumptions were based on misunderstandings or a lack of a deeper\nunderstanding of cloud technologies and the surrounding legal aspects. This led\nto a fear of the unknown, and subsequent inaction. In the end it turned out\nthat quite a lot of our workloads could indeed run in the public cloud, given some\nminor adjustments."}),"\n",(0,o.jsx)(t.p,{children:"Had we started out with the knowledge we have now, we would probably have\nstarted with a public cloud provider, and then moved to hybrid when and if\nwe saw a need for it. Using a cloud provider's managed Kubernetes offering\nis significantly easier than running your own, and you can get started much\nfaster, with less risk."}),"\n",(0,o.jsx)(t.p,{children:"Given our organization, we would probably have ended up with hybrid anyway, but\nthat complexity could potentially have been moved down the timeline to a point\nwhere the platform was more mature."}),"\n",(0,o.jsx)(t.p,{children:"Starting with hybrid is a massive undertaking, and you should have a good reason\nfor doing so. Do you need hybrid, or do you just need to mature your\norganization? If you do, reduce the scope of the initial work to get to a\nworkable platform, and preferably start in the cloud, adding hybrid features\nlater. If you're not sure, you probably don't need hybrid."}),"\n",(0,o.jsx)(t.h2,{id:"hybrid-gives-your-organization-flexibility",children:"Hybrid gives your organization flexibility"}),"\n",(0,o.jsx)(t.p,{children:(0,o.jsx)(t.img,{alt:"Illustration of cloud components",src:n(96822).A+"",width:"2880",height:"1200"})}),"\n",(0,o.jsx)(t.p,{children:"Now that we've built a platform that seamlessly runs workloads in both public\ncloud and on-premise, we have a lot of flexibility in where we run our workloads\nand how we manage them. Our experience is that this makes it easier for the\norganization to mature legacy workloads."}),"\n",(0,o.jsx)(t.p,{children:"All our greenfield projects are written with cloud native principles in mind,\nwhich makes it trivial to run them in the cloud. Legacy workloads, however, are\nnot so lucky. They are often written with a lot of assumptions about the\nunderlying infrastructure and are not cognizant of the resources they use. This\nmeans they are a poor fit to lift and shift to the cloud, as they will often be\nexpensive and inefficient."}),"\n",(0,o.jsxs)(t.p,{children:["With a hybrid platform, we can use our on-premise offering as a spring board for\nmodernization. Product teams will start by shifting their app to our on-premise\nKubernetes platform, and then gradually modernize it to be cloud native.\nThis method gives a few immediate benefits from the lift and shift like better\nobservability, developer experience and security features but also gives fewer of the\ndrawbacks, as the on-premise cloud is closer to the existing dependencies than a\npublic cloud. Once this is done, smaller chunks kan be rewritten as\nmicroservices and moved to the cloud, communicating with the monolith seamlessly\nover the hybrid network. This is sometimes referred to as the ",(0,o.jsx)(t.a,{href:"https://microservices.io/patterns/refactoring/strangler-application.html",children:"strangler\napplication"}),"."]}),"\n",(0,o.jsx)(t.p,{children:"This method significantly reduces the scope of refactoring, as one can focus on\ngradually rewriting smaller modules instead of rewriting the entire application."}),"\n",(0,o.jsx)(t.h2,{id:"service-mesh-is-hard-but-maybe-a-necessary-evil-to-make-hybrid-less-painful",children:"Service mesh is hard, but maybe a necessary evil to make hybrid less painful"}),"\n",(0,o.jsx)(t.p,{children:(0,o.jsx)(t.img,{alt:"Illustration of service mesh with Istio logo",src:n(73198).A+"",width:"2200",height:"917"})}),"\n",(0,o.jsx)(t.p,{children:"Oh my word how we have struggled with service mesh."}),"\n",(0,o.jsx)(t.p,{children:"Starting from nothing with a goal of providing a secure-by-default zero-trust\nnetwork layer with observability and traffic control is quite an undertaking,\nespecially when you pair that with setting up a new kubernetes-based\ninfrastructure from scratch. Istio is famously complex, and we've had our fair\nshare of that."}),"\n",(0,o.jsxs)(t.p,{children:["So how do we feel about Istio? There are various opinions in the team, but if we\naverage them all out, we're content. It's quite complex and can be hard to\ndebug, but it does the job. As we've matured and gotten more experience with\nIstio, we've also started to see more benefits, like extensions for ",(0,o.jsx)(t.a,{href:"https://www.envoyproxy.io/docs/envoy/latest/configuration/http/http_filters/oauth2_filter",children:"handling\nOAuth2"}),"\nand the traffic control features for gradual rollouts which we used for\ncanary-testing the migration of some of our larger applications to SKIP. Not all\nof these features, like EnvoyFilters, are supported by Anthos Service Mesh (ASM),\nwhich is why we're exploring using upstream Istio instead of ASM."]}),"\n",(0,o.jsxs)(t.p,{children:["One thing we quickly learned is to not let the product teams configure the\nservice mesh directly using service mesh resources. This is a recipe for\ndisaster. We tried this in the beginning, and first of all it's a huge\ncomplexity burden for the product teams. We also started getting a lot of\nweird issues when product teams would configure the mesh in ways that broke\ntheir encapsulation. Since the service mesh is a cluster-wide feature, if one\nteam makes an invalid configuration, it can break other teams' workloads.\nKubernetes namespaces be damned. We've therefore moved to a model where the\nplatform team provides an abstraction through\n",(0,o.jsx)(t.a,{href:"https://github.dev/kartverket/skiperator",children:"Skiperator"})," which configures the\nservice mesh on their behalf."]}),"\n",(0,o.jsxs)(t.p,{children:["Finally, I think it's prudent to ask yourself wether or not you actually need a\nservice mesh. If you're running a small cluster with a few services, you'll\nprobably be fine with using the built-in Kubernetes features like Ingress and\nNetwork Policies. The observability features are nice, but you can get most of\nthem with a combination of ",(0,o.jsx)(t.a,{href:"https://grafana.com/docs/tempo/latest/metrics-generator/service_graphs/",children:"instrumentation and\nGrafana"}),"."]}),"\n",(0,o.jsx)(t.p,{children:"If you need service mesh then limit the scope until you get comfortable with the\nmesh, for example start with just mTLS and observability, and then add zero\ntrust networking features later."}),"\n",(0,o.jsxs)(t.p,{children:["Also keep in mind there is a lot of competition in the service mesh space, and\nthere are some interesting alternatives to Istio, like\n",(0,o.jsx)(t.a,{href:"https://linkerd.io/",children:"Linkerd"})," and the up-and-coming ",(0,o.jsx)(t.a,{href:"https://cilium.io/use-cases/cluster-mesh/",children:"Cilium Service\nMesh"}),"."]}),"\n",(0,o.jsx)(t.h2,{id:"anthos-helps-you-as-a-platform-team-getting-started-with-best-practices-even-if-you-plan-to-move-to-open-source-components-later",children:"Anthos helps you as a platform team getting started with best practices.. Even if you plan to move to open source components later"}),"\n",(0,o.jsx)(t.p,{children:(0,o.jsx)(t.img,{alt:"Google Anthos logo",src:n(92661).A+"",width:"2200",height:"917"})}),"\n",(0,o.jsx)(t.p,{children:"When our platform team started out a few years ago, we picked some of the\nbrightest cloud engineers from within the organization and combined them with\nsome consultants to work on the platform. Most of these engineers had some\nexperience working with Kubernetes and cloud, but not building something of this\nscale from scratch. The first months would therefore be a learning experience for\nmost of the team."}),"\n",(0,o.jsx)(t.p,{children:"I think a lot of teams will be in a similar situation, and this is where a\nmanaged service like Anthos can be a huge help. Anthos is built with best\npractices in mind, so a lot of the architecture decisions were built-in to the\ninstaller. Choosing a managed offering, even when running on-prem has therefore\nhelped us deliver value to the product teams much quicker than if we had to\nbuild everything from scratch."}),"\n",(0,o.jsx)(t.p,{children:"What's important to point out is that choosing something that is managed does\nnot rule out using open source components later. We started out using all the\nparts that Anthos gave us, including service mesh, logging, monitoring and\nconfiguration management. Managed services do come with some tradeoffs, however,\nas you lose some of the finer control of the platform. As the team has matured\nand gained experience, we've started to replace some of these components with\nopen source alternatives, which has helped us save money and gain more control\nover our platform. This has the downside of having to maintain these\ncomponents ourselves, but with more experience in the team, this is a tradeoff\nwe feel is worth it."}),"\n",(0,o.jsx)(t.p,{children:"Even though we're increasingly using more open source components, we don't\nregret using a paid managed offering in the beginning. It helped us get started\nand make the right decisions early on, and we're now in a position where we can\ncapitalize on that great start."}),"\n",(0,o.jsx)(t.h2,{id:"keep-in-mind-autoscaling-when-choosing-licensing-models",children:"Keep in mind autoscaling when choosing licensing models"}),"\n",(0,o.jsx)(t.p,{children:(0,o.jsx)(t.img,{alt:"Autoscaling",src:n(52104).A+"",width:"2200",height:"917"})}),"\n",(0,o.jsx)(t.p,{children:"This may be an obvious point to some of the more experienced platform engineers\nout there, but it was still something that we had to learn. When we started out,\nwe appreciated the simplicity of SaaS products that billed per node, as it made\nit easy to predict costs. We could simply look at the number of nodes we had\nrunning and multiply that with the price per node to get a relatively accurate\nestimate of what this offering would cost. This would turn out to be a double\nedged sword, however."}),"\n",(0,o.jsx)(t.p,{children:"It is safe to assume that one of the reasons people choose Kubernetes is the ability\nto scale workloads easily. This could be scaling up to handle more traffic, or\nscaling down to save money. This is a great feature, but as the number of workloads\ngrow, the provisioned nodes will start to become insufficient and new nodes will\nbe provisioned. With Kubernetes and Anthos on VMware this can be done\nautomatically, which is a fantastic feature."}),"\n",(0,o.jsx)(t.p,{children:"The problem arises when you scale out more nodes and have a static license that\nbills per node. We've made the mistake of getting contracts with two (now just\none) SaaS providers where we order a set of nodes, let's say 10, and when\nworkloads scale up, we end up with more than 10 nodes. This means we're not\nrunning that SaaS-service's agents on the new nodes, which can be anything from\ninconvenient to critical, depending on the service. In the end we've had to\nrestrict our node scaling to avoid this issue, which goes against the whole\nethos of Kubernetes. We're also provisioning bigger nodes than we need to avoid\nscaling out, which can be suboptimal."}),"\n",(0,o.jsx)(t.p,{children:"We're now working with the vendors to get a more flexible license that bills per\nnode on demand, but this is something to keep in mind when choosing a SaaS\noffering. Try to factor in the future scaling needs of your platform when\npurchasing SaaS services."}),"\n",(0,o.jsx)(t.h2,{id:"summary",children:"Summary"}),"\n",(0,o.jsx)(t.p,{children:"To summarize: We've learned a lot on our journey to building a hybrid Kubernetes\nplatform. Over the last few years we've iterated on our platform and learned\nlots of great lessons. It's been a huge help and privilege to have the support\nof our organization, especially in terms of us being allowed to fail and learn\nfrom our mistakes. The Norwegian saying \"it's never too late to turn around\"\ncomes to mind, as we've changed course several times on our journey, sometimes\nto the annoyance of our product teams who depend on a stable platform - but in\nthe end we've ended up with a better product - a platform we can be proud of and\nthat our product teams love using."}),"\n",(0,o.jsx)(t.p,{children:"Thanks for reading this series on Anthos and hybrid Kubernetes. We hope you've\nlearned something from our experiences, and that our hard earned lessons can\nhelp you on your journey to building a hybrid Kubernetes platform."}),"\n",(0,o.jsx)(t.p,{children:(0,o.jsx)(t.em,{children:"Disclaimer - Google, GKE and Anthos are trademarks of Google LLC and this website is not\nendorsed by or affiliated with Google in any way."})})]})}function u(e={}){const{wrapper:t}={...(0,s.R)(),...e.components};return t?(0,o.jsx)(t,{...e,children:(0,o.jsx)(d,{...e})}):d(e)}}}]);