"use strict";(self.webpackChunkskip_docs=self.webpackChunkskip_docs||[]).push([[6194],{28453:(e,n,t)=>{t.d(n,{R:()=>i,x:()=>o});var r=t(96540);const s={},a=r.createContext(s);function i(e){const n=r.useContext(a);return r.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:i(e.components),r.createElement(a.Provider,{value:n},e.children)}},35899:(e,n,t)=>{t.d(n,{A:()=>r});const r=t.p+"assets/images/555483143-69039b1ebe954d3161665ea3d58eb670.png"},55365:(e,n,t)=>{t.d(n,{A:()=>r});const r=t.p+"assets/images/argo-cd-apps-repos-afca401e45f94689b04c649bc533824f.png"},67722:(e,n,t)=>{t.d(n,{A:()=>r});const r=t.p+"assets/images/555810821-6d650e3951416afa08ce29f3a24313c3.png"},91345:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>l,contentTitle:()=>o,default:()=>c,frontMatter:()=>i,metadata:()=>r,toc:()=>p});const r=JSON.parse('{"id":"applikasjon-utrulling/argo-cd/hva-er-et-apps-repo","title":"Hva er et apps-repo","description":"Github repo","source":"@site/docs/03-applikasjon-utrulling/09-argo-cd/02-hva-er-et-apps-repo.md","sourceDirName":"03-applikasjon-utrulling/09-argo-cd","slug":"/applikasjon-utrulling/argo-cd/hva-er-et-apps-repo","permalink":"/docs/applikasjon-utrulling/argo-cd/hva-er-et-apps-repo","draft":false,"unlisted":false,"editUrl":"https://github.com/kartverket/skip-docs/edit/main/docs/03-applikasjon-utrulling/09-argo-cd/02-hva-er-et-apps-repo.md","tags":[],"version":"current","sidebarPosition":2,"frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"Komme i gang med Argo CD","permalink":"/docs/applikasjon-utrulling/argo-cd/komme-i-gang-med-argocd"},"next":{"title":"Hvordan bruke Argo CD","permalink":"/docs/applikasjon-utrulling/argo-cd/hvordan-bruke-argocd"}}');var s=t(74848),a=t(28453);const i={},o="Hva er et apps-repo",l={},p=[{value:"Mappestruktur",id:"mappestruktur",level:2},{value:"Gjenbruke konfigurasjon",id:"gjenbruke-konfigurasjon",level:2},{value:"Kildekode-repoer",id:"kildekode-repoer",level:2},{value:"Deploye automatisk ved push",id:"deploye-automatisk-ved-push",level:2},{value:"Eksempel p\xe5 Github Actions",id:"eksempel-p\xe5-github-actions",level:3}];function d(e){const n={a:"a",admonition:"admonition",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",img:"img",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,a.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.header,{children:(0,s.jsx)(n.h1,{id:"hva-er-et-apps-repo",children:"Hva er et apps-repo"})}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.img,{alt:"Github repo",src:t(67722).A+"",width:"1280",height:"1007"})}),"\n",(0,s.jsxs)(n.p,{children:["N\xe5r dere ",(0,s.jsx)(n.a,{href:"/docs/applikasjon-utrulling/argo-cd/komme-i-gang-med-argocd",children:"kommer i gang med Argo"})," f\xe5r teamet deres et apps-repo. Hva er dette og hvordan bruker man det?"]}),"\n",(0,s.jsxs)(n.p,{children:["Et apps-repo inneholder ",(0,s.jsx)(n.a,{href:"https://kartverket.atlassian.net/wiki/spaces/SKIPDOK/pages/306873095",children:"manifest-filer"})," for alle applikasjonene som et produktteam har ansvaret for. Disse manifest-filene beskriver hvordan applikasjonen skal se ut p\xe5 kubernetes, hvilke container images som skal deployes, hvor mange replikaer som skal kj\xf8re, og s\xe5 videre. Vanligvis er dette i form av ",(0,s.jsx)(n.a,{href:"https://github.com/kartverket/skiperator",children:"Skiperator Application-manifester"})," og ",(0,s.jsx)(n.a,{href:"https://kartverket.atlassian.net/wiki/spaces/SKIPDOK/pages/554566739",children:"ExternalSecret-manifester"}),". Argo CD leser disse og synkroniserer dem ut til kubernetes-clusteret."]}),"\n",(0,s.jsx)(n.h2,{id:"mappestruktur",children:"Mappestruktur"}),"\n",(0,s.jsx)(n.p,{children:"Du vil se at et apps-repo har en predefinert mappestruktur. Den ser omtrent slik ut:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-code",children:"env/         # 1\n   [cluster]/ # 2\n      foo-main/  # 3\n        app.yaml # 4\n"})}),"\n",(0,s.jsxs)(n.p,{children:["P\xe5 env niv\xe5 (2) finner man mapper som gjenspeiler hvilket milj\xf8 det skal synkroniseres til. Dette er navnet p\xe5 clusteret, enten ",(0,s.jsx)(n.code,{children:"atkv3-dev"}),", ",(0,s.jsx)(n.code,{children:"atvk3-prod"}),", ",(0,s.jsx)(n.code,{children:"atgcp1-dev"})," eller ",(0,s.jsx)(n.code,{children:"atgcp1-prod"}),"."]}),"\n",(0,s.jsxs)(n.p,{children:["P\xe5 niv\xe5 2 finner man navnet p\xe5 namespacet som det skal deployes til. Dette m\xe5 starte med et gitt prefiks, vanligvis produktnavnet (i dette tilfellet heter produktet ",(0,s.jsx)(n.code,{children:"foo"})," ). Etter prefikset kan man skrive hva man vil, vanligvis navnet p\xe5 branchen i git som er deployed her. Dette kan v\xe6re nyttig om man \xf8nsker \xe5 deploye en mer stabil ",(0,s.jsx)(n.code,{children:"main"})," branch deployed i tillegg til \xe5 deploye pull requests som testes live f\xf8r de merges."]}),"\n",(0,s.jsxs)(n.p,{children:["Niv\xe5 3, alts\xe5 innholdet av mappen over, er et sett med en eller flere manifestfiler som beskriver applikasjonen. I eksempelet over vil ",(0,s.jsx)(n.code,{children:"app.yaml"})," inneholde en ",(0,s.jsx)(n.a,{href:"https://github.com/kartverket/skiperator",children:"Skiperator Application manifest"})," som for eksempel kan se slik ut:"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-yaml",children:"apiVersion: skiperator.kartverket.no/v1alpha1\nkind: Application\nmetadata:\n  name: foo-frontend\nspec:\n  image: kartverket/example\n  port: 8080\n"})}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.img,{alt:"Illustrasjon av hvordan manifest-filer blir deployet til Kubernetes",src:t(55365).A+"",width:"771",height:"432"})}),"\n",(0,s.jsx)(n.p,{children:"N\xe5r vi putter hele dette eksemplet sammen vil f\xf8lgende skje:"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Produktteamet gj\xf8r en endring i apps-repoet"}),"\n",(0,s.jsxs)(n.li,{children:["Argo CD vil etter kort tid lese apps-repoet og finne den endrede ",(0,s.jsx)(n.code,{children:"app.yaml"})," filen"]}),"\n",(0,s.jsxs)(n.li,{children:["Argo CD ser at den er plassert i ",(0,s.jsx)(n.code,{children:"dev"})," og ",(0,s.jsx)(n.code,{children:"foo-main"})," mappene og oppretter ",(0,s.jsx)(n.code,{children:"foo-main"})," namespacet p\xe5 dev-clusteret"]}),"\n",(0,s.jsx)(n.li,{children:"Argo CD legger Application definisjonen inn i namespacet p\xe5 Kubernetes"}),"\n",(0,s.jsxs)(n.li,{children:["Skiperator plukker opp endringen i namespacet og bygger ut Kubernetes-definisjonen for en applikasjon som skal kj\xf8re ",(0,s.jsx)(n.code,{children:"kartverket/example"})," imaget"]}),"\n",(0,s.jsx)(n.li,{children:"Kubernetes puller container imaget og starter podder som kj\xf8rer applikasjonen"}),"\n"]}),"\n",(0,s.jsx)(n.h2,{id:"gjenbruke-konfigurasjon",children:"Gjenbruke konfigurasjon"}),"\n",(0,s.jsxs)(n.p,{children:["Man vil ofte f\xe5 gjentagende konfigurasjon n\xe5r man f\xe5r flere applikasjoner, namespacer og milj\xf8er. Det finnes metoder i Argo CD for \xe5 gj\xf8re konfigurasjonen gjenbrukbar, og du vil finne dokumentasjon om disse p\xe5 ",(0,s.jsx)(n.a,{href:"https://argo-cd.readthedocs.io/en/stable/user-guide/application_sources/",children:"Argo CD Tools"})," ."]}),"\n",(0,s.jsxs)(n.p,{children:["Flere produktteam har l\xf8st gjenbruk ved \xe5 bruke ",(0,s.jsx)(n.a,{href:"http://jsonnet.org/",children:"http://jsonnet.org/"})," som er st\xf8ttet ut av boksen med Argo. Man kan se et eksempel av dette p\xe5 ",(0,s.jsx)(n.a,{href:"https://github.com/kartverket/eiet-apps",children:"eiet-apps"})," . SKIP jobber med et ",(0,s.jsx)(n.a,{href:"https://github.com/kartverket/wip-skip-libsonnet",children:"bibliotek med gjenbrukbare jsonnet-objekter"})," ."]}),"\n",(0,s.jsx)(n.p,{children:"Vi p\xe5 SKIP anbefaler at dere starter med \xe5 sjekke inn vanlige YAML-filer mens dere l\xe6rer dere systemet. N\xe5r dere blir komfortable med Argo kan dere se p\xe5 alternativene som er beskrevet over, da blir ikke l\xe6ringskurven brattere enn n\xf8dvendig."}),"\n",(0,s.jsx)(n.h2,{id:"kildekode-repoer",children:"Kildekode-repoer"}),"\n",(0,s.jsxs)(n.p,{children:["Apps-repoer skal ",(0,s.jsx)(n.strong,{children:"ikke"})," inneholde kildekode. Apps-repoer har kun metadata om applikasjonen i form av manifest-filer. Dette kan man ogs\xe5 lese om i ",(0,s.jsx)(n.a,{href:"https://argo-cd.readthedocs.io/en/stable/user-guide/best_practices/#separating-config-vs-source-code-repositories",children:"Best Practices for Argo CD"}),"."]}),"\n",(0,s.jsx)(n.p,{children:"Dette gj\xf8r at man f\xe5r et tydelig skille mellom kildekoderepoer og apps-repoer. Kildekoderepoer har ansvaret for \xe5 lagre kode, bygge artefakter og container-imager. Apps-repoer beskriver den \xf8nskede staten til applikasjonen p\xe5 clusteret og Argo jobber mot \xe5 bringe clusteret i synk med denne staten. Dette gj\xf8r det ogs\xe5 enkelt \xe5 forholde seg til apps-repoene som en \u201csingle source of truth\u201d til applikasjonsstaten p\xe5 clusteret."}),"\n",(0,s.jsx)(n.h2,{id:"deploye-automatisk-ved-push",children:"Deploye automatisk ved push"}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.img,{alt:"Illustrasjon av hvordan kildekode blir deployed med GitOps",src:t(35899).A+"",width:"1381",height:"777"})}),"\n",(0,s.jsx)(n.p,{children:"Man \xf8nsker ofte \xe5 deploye ut nye versjoner av applikasjoner ved push til kildekoderepoer. Hvordan kan man gj\xf8re dette med Argo CD?"}),"\n",(0,s.jsxs)(n.p,{children:["Ved hvert push til et kildekoderepo kj\xf8res et bygg for \xe5 bygge et byggartefakt og bygge et container image. S\xe5 snart dette imaget er pushet til et registry som ",(0,s.jsx)(n.a,{href:"http://ghcr.io/",children:"ghcr.io"})," vil man at dette skal legges ut p\xe5 clusteret, og da m\xe5 man oppdatere manifest-filene i apps-repoet. Man kan oppdatere disse filene manuelt for \xe5 trigge en synk, men det er ogs\xe5 mulig \xe5 gj\xf8re dette automatisk som en del av samme pipeline."]}),"\n",(0,s.jsxs)(n.p,{children:["Etter imaget er publisert til ",(0,s.jsx)(n.a,{href:"http://ghcr.io/",children:"ghcr.io"})," puller bygget apps-repoet ved \xe5 bruke ",(0,s.jsx)(n.a,{href:"https://github.com/actions/checkout",children:"https://github.com/actions/checkout"}),". Deretter endres filene til \xe5 inneholde referansen til det nye imaget, og disse filene commites lokalt. Hvordan disse filene endres er opp til produktteamet, men et forslag ligger i ",(0,s.jsx)(n.a,{href:"https://argo-cd.readthedocs.io/en/stable/user-guide/ci_automation/",children:"Automation from CI Pipelines"}),". Til slutt pushes filene til repoet som vil trigge en synk med de oppdaterte manifestene."]}),"\n",(0,s.jsx)(n.p,{children:"Dette kan ogs\xe5 gj\xf8res med en PR istedenfor \xe5 pushe rett til apps-repoet om man vil ha en godkjenning f\xf8r deploy."}),"\n",(0,s.jsxs)(n.p,{children:["For \xe5 logge inn p\xe5 apps-repoet brukes metoden som beskrives i ",(0,s.jsx)(n.a,{href:"/docs/applikasjon-utrulling/github-actions/tilgang-til-repoer-med-tokens-fra-github-actions",children:"Tilgang til repoer med tokens fra GitHub Actions"}),"."]}),"\n",(0,s.jsx)(n.admonition,{type:"info",children:(0,s.jsx)(n.p,{children:"Dersom man bruker Argo CD til \xe5 opprette namespacer for alle branches og pull requests er det viktig \xe5 slette branchene n\xe5r de ikke lenger er i bruk. Det er begrenset med kapasitet p\xe5 clusterene og \xe5 anskaffe hardware, b\xe5de on-prem og i sky, er ekstremt kostbart. Det holder \xe5 slette filene i apps-repoet for \xe5 rydde opp, noe som kan gj\xf8res automatisk ved sletting av branches."})}),"\n",(0,s.jsx)(n.h3,{id:"eksempel-p\xe5-github-actions",children:"Eksempel p\xe5 Github Actions"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-yaml",children:'name: build-and-deploy\n\non:\n  pull_requests:\n    target:\n    - main\n  workflow_dispatch:\n  push:\n    branches:\n      - main\n\nenv:\n  prefix: prefix\n\njobs:\n  build:\n    # Her bygges et artefakt og et container image pushes til ghcr.io\n\n  deploy-argo:\n    needs: build\n    runs-on: ubuntu-latest\n    strategy:\n      matrix:\n        env: [\'dev\', \'test\', \'prod\']\n    steps:\n      - uses: octo-sts/action@6177b4481c00308b3839969c3eca88c96a91775f # v1.0.0\n        id: octo-sts\n        with:\n          scope: kartverket/example-apps\n          identity: example_name\n\n      - name: Checkout apps repo\n        uses: actions/checkout@v3\n        with:\n          repository: kartverket/example-apps\n          token: ${{ steps.octo-sts.outputs.token }}\n\n      - name: Deploy to ${{ matrix.version }}\n        run: |\n          namespace="${{ env.prefix }}-${{ github.ref_name }}"\n          mkdir -p ./${{ matrix.version }}/$namespace\n          cp -r templates/frontend.yaml ./${{ matrix.version }}/$namespace/frontend.yaml\n          kubectl patch --local \\\n            -f ./${{ matrix.version }}/$namespace/frontend.yaml \\\n            -p \'{"spec":{"image":"${{needs.build.outputs.new_tag}}"}}\' \\\n            -o yaml\n          git config --global user.email "noreply@kartverket.no"\n          git config --global user.name "GitHub Actions"\n          git commit -am "Deploy ${{ matrix.version }} version ${{github.ref_name}}"\n          git push\n'})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-yaml",children:'name: clean-up-deploy\n\non:\n  delete:\n\nenv:\n  prefix: prefix\n\njobs:\n  delete-deployment:\n    runs-on: ubuntu-latest\n    strategy:\n      matrix:\n        env: [\'dev\', \'test\', \'prod\']\n    steps:\n      - uses: octo-sts/action@6177b4481c00308b3839969c3eca88c96a91775f # v1.0.0\n        id: octo-sts\n        with:\n          scope: kartverket/example-apps\n          identity: example_name\n\n      - name: Checkout apps repo\n        uses: actions/checkout@v3\n        with:\n          repository: kartverket/example-apps\n          token: ${{ steps.octo-sts.outputs.token }}\n\n      - name: Delete ${{ matrix.version }} deploy\n        run: |\n          namespace="${{ env.prefix }}-${{ github.ref_name }}"\n          rm -rfv ./${{ matrix.version }}/$namespace\n          git config --global user.email "noreply@kartverket.no"\n          git config --global user.name "GitHub Actions"\n          git commit -am "Delete ${{ matrix.version }} deploy ${{github.ref_name}}"\n          git push\n\n'})})]})}function c(e={}){const{wrapper:n}={...(0,a.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(d,{...e})}):d(e)}}}]);