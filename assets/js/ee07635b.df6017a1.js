"use strict";(self.webpackChunkskip_docs=self.webpackChunkskip_docs||[]).push([[4126],{1542:(e,n,a)=>{a.r(n),a.d(n,{assets:()=>c,contentTitle:()=>r,default:()=>d,frontMatter:()=>s,metadata:()=>i,toc:()=>l});const i=JSON.parse('{"id":"applikasjon-utrulling/skiperator/configuring","title":"Common Skiperator configuration","description":"This is just a quick reference for the most common configurations in Skiperator.","source":"@site/docs/03-applikasjon-utrulling/03-skiperator/03-configuring.md","sourceDirName":"03-applikasjon-utrulling/03-skiperator","slug":"/applikasjon-utrulling/skiperator/configuring","permalink":"/docs/applikasjon-utrulling/skiperator/configuring","draft":false,"unlisted":false,"editUrl":"https://github.com/kartverket/skip-docs/edit/main/docs/03-applikasjon-utrulling/03-skiperator/03-configuring.md","tags":[],"version":"current","sidebarPosition":3,"frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"Getting started","permalink":"/docs/applikasjon-utrulling/skiperator/get-started"},"next":{"title":"API Reference","permalink":"/docs/applikasjon-utrulling/skiperator/api-docs"}}');var o=a(74848),t=a(28453);const s={},r="Common Skiperator configuration",c={},l=[{value:"Application",id:"application",level:2},{value:"Ingress",id:"ingress",level:3},{value:"Access policy",id:"access-policy",level:3},{value:"allowing communication between two applications in the same namespace",id:"allowing-communication-between-two-applications-in-the-same-namespace",level:3},{value:"allowing in and outbound traffic to an application in a different namespace",id:"allowing-in-and-outbound-traffic-to-an-application-in-a-different-namespace",level:4},{value:"allowing outbound traffic to a job in namespaces with label",id:"allowing-outbound-traffic-to-a-job-in-namespaces-with-label",level:4},{value:"access policy to allow traffic to a public domain",id:"access-policy-to-allow-traffic-to-a-public-domain",level:4},{value:"Replicas",id:"replicas",level:3},{value:"Environment variables",id:"environment-variables",level:3},{value:"GCP",id:"gcp",level:3},{value:"SKIPJob",id:"skipjob",level:2},{value:"Cron - SkipJob",id:"cron---skipjob",level:3},{value:"Commands - SkipJob",id:"commands---skipjob",level:3},{value:"Access policy - SkipJob",id:"access-policy---skipjob",level:3},{value:"Routing",id:"routing",level:2},{value:"Frontend and backend services under the same domain",id:"frontend-and-backend-services-under-the-same-domain",level:3}];function p(e){const n={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",h4:"h4",header:"header",p:"p",pre:"pre",...(0,t.R)(),...e.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(n.header,{children:(0,o.jsx)(n.h1,{id:"common-skiperator-configuration",children:"Common Skiperator configuration"})}),"\n",(0,o.jsxs)(n.p,{children:["This is just a quick reference for the most common configurations in Skiperator.\nFor a complete reference see the ",(0,o.jsx)(n.a,{href:"/docs/applikasjon-utrulling/skiperator/api-docs",children:"API docs"}),"."]}),"\n",(0,o.jsx)(n.h2,{id:"application",children:"Application"}),"\n",(0,o.jsx)(n.h3,{id:"ingress",children:"Ingress"}),"\n",(0,o.jsx)(n.p,{children:"An ingress is a way to expose your application to the outside world. It is a Kubernetes resource that manages external access to services in a cluster, typically HTTP.\nThis sets up all the necessary configuration behind the scenes to route traffic to your application, and also sets up a lets encrypt certificate for your application."}),"\n",(0,o.jsx)(n.p,{children:"Simple example of an ingress:"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-yaml",children:"apiVersion: skiperator.kartverket.no/v1alpha1\nkind: Application\nmetadata:\n  name: ingressapp\nspec:\n  image: image\n  port: 8080\n  ingresses:\n    - ingressapp.atkv3-dev.kartverket-intern.cloud\n  redirectToHTTPS: true\n"})}),"\n",(0,o.jsxs)(n.p,{children:["This sets up an ingress to your application that can be reached from Kartverkets internal network. The ",(0,o.jsx)(n.code,{children:"redirectToHTTPS"})," field is optional and will redirect all incoming traffic to HTTPS.\nTo make it publicly available you can remove the ",(0,o.jsx)(n.code,{children:"-intern"})," part of the domain name."]}),"\n",(0,o.jsxs)(n.p,{children:["If you want, or already have a different domain name for your application then we most likely need to set up a CNAME record in DNS. You can read more about domain names ",(0,o.jsx)(n.a,{href:"../06-kubernetes/07-urler-og-sertifikat-for-tjenester-p%C3%A5-skip.md",children:"here"}),"."]}),"\n",(0,o.jsx)(n.h3,{id:"access-policy",children:"Access policy"}),"\n",(0,o.jsxs)(n.p,{children:["In SKIP we run istio as a service mesh. This means that all traffic between services is encrypted by default.\nAll traffic is also blocked with network policies or istio policies by default.\nTo allow traffic between services you need to set up an access policy.\nThis is done by specifying ",(0,o.jsx)(n.code,{children:"spec.accessPolicy"})," in your application."]}),"\n",(0,o.jsx)(n.h3,{id:"allowing-communication-between-two-applications-in-the-same-namespace",children:"allowing communication between two applications in the same namespace"}),"\n",(0,o.jsxs)(n.p,{children:["creates rules to allow traffic between application ",(0,o.jsx)(n.code,{children:"app1"})," and ",(0,o.jsx)(n.code,{children:"app2"})," in the same namespace on service ports"]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-yaml",children:"apiVersion: skiperator.kartverket.no/v1alpha1\nkind: Application\nmetadata:\n  name: app1\nspec:\n  image: image\n  port: 8080\n  accessPolicy:\n    inbound:\n      rules:\n        - application: app2\n    outbound:\n      rules:\n        - application: app2\n---\napiVersion: skiperator.kartverket.no/v1alpha1\nkind: Application\nmetadata:\n  name: app2\nspec:\n  image: image\n  port: 8080\n  accessPolicy:\n    inbound:\n      rules:\n        - application: app1\n    outbound:\n      rules:\n        - application: app1\n"})}),"\n",(0,o.jsx)(n.h4,{id:"allowing-in-and-outbound-traffic-to-an-application-in-a-different-namespace",children:"allowing in and outbound traffic to an application in a different namespace"}),"\n",(0,o.jsxs)(n.p,{children:["creates network policy rules to allow inbound and outbound traffic on service port to application ",(0,o.jsx)(n.code,{children:"app2"})," in namespace ",(0,o.jsx)(n.code,{children:"namespace2"})]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-yaml",children:"apiVersion: skiperator.kartverket.no/v1alpha1\nkind: Application\nmetadata:\n  name: app1\nspec:\n  image: image\n  port: 8080\n  accessPolicy:\n    inbound:\n      rules:\n        - application: app2\n          namespace: namespace2\n    outbound:\n      rules:\n        - application: app2\n          namespace: namespace2\n"})}),"\n",(0,o.jsx)(n.h4,{id:"allowing-outbound-traffic-to-a-job-in-namespaces-with-label",children:"allowing outbound traffic to a job in namespaces with label"}),"\n",(0,o.jsxs)(n.p,{children:["creates outbound rules to allow traffic to the skipjob ",(0,o.jsx)(n.code,{children:"job2"})," in all namespaces with label ",(0,o.jsx)(n.code,{children:"team: someteam"})," on service port for ",(0,o.jsx)(n.code,{children:"app2"}),"\nNote that all skipjobs must have the postfix ",(0,o.jsx)(n.code,{children:"-skipjob"})," in the name when defining the application name in the access policy."]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-yaml",children:"apiVersion: skiperator.kartverket.no/v1alpha1\nkind: Application\nmetadata:\n  name: app1\nspec:\n  image: image\n  port: 8080\n  accessPolicy:\n    outbound:\n      rules:\n        - application: job2-skipjob\n          namespaceByLabel: \n            team: someteam\n"})}),"\n",(0,o.jsx)(n.h4,{id:"access-policy-to-allow-traffic-to-a-public-domain",children:"access policy to allow traffic to a public domain"}),"\n",(0,o.jsx)(n.p,{children:"creates istio policies to allow traffic to a public domain on port 443, and different public domain on port 80"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-yaml",children:"apiVersion: skiperator.kartverket.no/v1alpha1\nkind: Application\nmetadata:\n  name: app1\nspec:\n  image: image\n  port: 8080\n  accessPolicy:\n    outbound:\n      external:\n        - host: kartverket.no\n        - host: google.com\n          ports:\n            - name: http\n              port: 80  \n              protocol: HTTP\n"})}),"\n",(0,o.jsx)(n.h3,{id:"replicas",children:"Replicas"}),"\n",(0,o.jsx)(n.p,{children:"you can either specify a fixed number of replicas or let the autoscaler handle it for you."}),"\n",(0,o.jsx)(n.p,{children:"if not specified skiperator uses autoscaler by default:"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-yaml",children:"minReplicas: 2\nmaxReplicas: 5\n"})}),"\n",(0,o.jsx)(n.p,{children:"static:"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-yaml",children:"apiVersion: skiperator.kartverket.no/v1alpha1\nkind: Application\nmetadata:\n  name: static-replicas\nspec:\n  image: image\n  port: 8080\n  replicas: 2\n"})}),"\n",(0,o.jsx)(n.p,{children:"autoscaler:"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-yaml",children:"apiVersion: skiperator.kartverket.no/v1alpha1\nkind: Application\nmetadata:\n  name: auto-replicas\nspec:\n  image: image\n  port: 8080\n  replicas:\n    min: 3\n    max: 6\n    targetCpuUtilization: 60\n"})}),"\n",(0,o.jsx)(n.p,{children:"This will always have minimum 3 pods running, and scale up to more pods (max 6) if cpu utilization hits 60%.\nOnly minimum value is required."}),"\n",(0,o.jsx)(n.h3,{id:"environment-variables",children:"Environment variables"}),"\n",(0,o.jsxs)(n.p,{children:["Environment values can be set directly in the application spec with ",(0,o.jsx)(n.code,{children:"spec.env"})," or by using a secret or config map with ",(0,o.jsx)(n.code,{children:"spec.envFrom"}),"."]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-yaml",children:'apiVersion: skiperator.kartverket.no/v1alpha1\nkind: Application\nmetadata:\n  name: auto-replicas\nspec:\n  image: image\n  port: 8080\n  env: \n    - name: ENV_VAR\n      value: "value"\n  envFrom:\n    - configMap: config-map-name\n    - configMap: config-map-name2\n    - secret: secret-name\n'})}),"\n",(0,o.jsx)(n.h3,{id:"gcp",children:"GCP"}),"\n",(0,o.jsxs)(n.p,{children:["If your application needs to read a gcp bucket for example you need to set up a service account with the correct permissions and add it to the application spec.\nBest practice here is to create a service account with the same name as the application, for example ",(0,o.jsx)(n.code,{children:"myapp@some-project-id.iam.gserviceaccount.com"}),", then give this service account minimal permissions in GCP Console."]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-yaml",children:"apiVersion: skiperator.kartverket.no/v1alpha1\nkind: Application\nmetadata:\n  name: auto-replicas\nspec:\n  image: image\n  port: 8080\n  gcp:\n    auth: \n      serviceAccount: myapp@some-project-id.iam.gserviceaccount.com\n"})}),"\n",(0,o.jsx)(n.h2,{id:"skipjob",children:"SKIPJob"}),"\n",(0,o.jsx)(n.h3,{id:"cron---skipjob",children:"Cron - SkipJob"}),"\n",(0,o.jsx)(n.p,{children:"basic cron job that executes every minute"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-yaml",children:'apiVersion: skiperator.kartverket.no/v1alpha1\nkind: SKIPJob\nmetadata:\n  name: myjob\nspec:\n  container:\n    image: image:latest\n  cron:\n    schedule: "* * * * *"\n'})}),"\n",(0,o.jsx)(n.h3,{id:"commands---skipjob",children:"Commands - SkipJob"}),"\n",(0,o.jsx)(n.p,{children:"a job that uses a command with a docker image"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-yaml",children:'apiVersion: skiperator.kartverket.no/v1alpha1\nkind: SKIPJob\nmetadata:\n  name: myjob\nspec:\n  container:\n    image: "perl:5.34.0"\n    command:\n      - "perl"\n      - "-Mbignum=bpi"\n      - "-wle"\n      - "print bpi(2000)"\n'})}),"\n",(0,o.jsx)(n.h3,{id:"access-policy---skipjob",children:"Access policy - SkipJob"}),"\n",(0,o.jsx)(n.p,{children:"This is the same as for applications, except we don't define inbound policies for jobs."}),"\n",(0,o.jsx)(n.h2,{id:"routing",children:"Routing"}),"\n",(0,o.jsx)(n.h3,{id:"frontend-and-backend-services-under-the-same-domain",children:"Frontend and backend services under the same domain"}),"\n",(0,o.jsx)(n.p,{children:"One thing that is important to remember with routes is that the order of the routes matters.\nThe route that is defined first will be the one that is matched first."}),"\n",(0,o.jsxs)(n.p,{children:["If your backend service expects requests without the leading pathPrefix, you can configure ",(0,o.jsx)(n.code,{children:"rewriteUri"})," to remove the prefix before it arrives at the backend."]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-yaml",children:"apiVersion: skiperator.kartverket.no/v1alpha1\nkind: Routing\nmetadata:\n    name: myrouting\nspec:\n    hostname: kartverket.com\n    routes:\n        - pathPrefix: /api          # Highest priority\n          rewriteUri: true\n          targetApp: backend-app\n        - pathPrefix: /             # Lowest priority\n          targetApp: frontend-app\n\n"})})]})}function d(e={}){const{wrapper:n}={...(0,t.R)(),...e.components};return n?(0,o.jsx)(n,{...e,children:(0,o.jsx)(p,{...e})}):p(e)}},28453:(e,n,a)=>{a.d(n,{R:()=>s,x:()=>r});var i=a(96540);const o={},t=i.createContext(o);function s(e){const n=i.useContext(t);return i.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function r(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:s(e.components),i.createElement(t.Provider,{value:n},e.children)}}}]);